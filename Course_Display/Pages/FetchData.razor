@page "/fetchdata"

@using Course_Display.Data;
@using CsvHelper;
@using System.IO;
@using System.Globalization;
@using BlazorInputFile;
@inject DBService dbService

<h1>Fetch Data</h1>

<h4>Select Core </h4>
<InputFile multiple OnChange="HandleFileSelected" />


@{

    if (CoreList.Count == 0 && classList.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        int oldCoreListCount = CoreList.Count - 1;
        <h2 style="@(checkCoreListStatus() ? "Background-color:green" : "Background-color:red")">Core Requirements</h2>
        foreach (Course c in CoreList)
        {
            <ClassComponent course="c" classList="classList"></ClassComponent>
        }
    }
    <br />
    <br />
    if (UpperList.Count == 0 && classList.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2 style="@(returnCreditHours(UpperList) >=  12 ? "Background-color:green" : "Background-color:red")">Upper Requirements</h2>
        foreach (Course c in UpperList)
        {
            <ClassComponent course="c" classList="classList"></ClassComponent>
        }
    }
    <br />
    <br />
    if (AddList.Count == 0 && classList.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2 style="@(returnCreditHours(AddList) >=  9 ? "Background-color:green" : "Background-color:red")">Additional Requirements</h2>
        foreach (Course c in AddList)
        {
            <ClassComponent course="c" classList="classList"></ClassComponent>
        }
    }
}




@code {
    /// <value>Gets the IEnumerable of ReqCourses from the CSVfile.</value>
    public IEnumerable<ReqCourse> CSVfile;
    /// <value>Gets the list of Courses for the required Core classes</value>
    public List<Course> CoreList = new List<Course>();
    /// <value>Gets the list of Courses for the required Upper Extension classes</value>
    public List<Course> UpperList = new List<Course>();
    /// <value>Gets the list of Courses for the required Additonal Core Extension classes</value>
    public List<Course> AddList = new List<Course>();
    /// <value>Gets the list of class names for the user's taken classes</value>
    public List<string> classList = new List<string>();

    public bool CoreListDone = false;
    public bool UpperListCreditHours = false;
    public bool AddListCreditHours = false;


    /// <summary>
    /// Loops through the CoreList and determines whether or not all the courses have been taken
    /// </summary>
    /// <returns>bool</returns>
    public bool checkCoreListStatus()
    {
        foreach(Course c in CoreList)
        {
            if (classList.Contains(c.CourseName))
            {
                CoreListDone = true;
            }
            else
            {
                CoreListDone = false;
                break;
            }
        }

        return CoreListDone;
    }

    /// <summary>
    /// Loops through the <paramref name="ListToCheck"/> and adds up the credit hours of each class taken in that list
    /// returns the total amount of credit hours taken
    /// </summary>
    /// <returns> int </returns>
    /// <param name="ListToCheck">A Course List</param>
    public int returnCreditHours(List<Course> ListToCheck)
    {
        var creditHoursTaken = 0;
        foreach (Course c in ListToCheck)
        {
            if (classList.Contains(c.CourseName))
            {
                creditHoursTaken += c.CreditHours;
            }
        }

        return creditHoursTaken;
    }

    /// <summary>
    /// Takes <paramref name="files"> and uploads the given classList.csv file first, and then uploads the other given files
    /// </summary>
    /// <param name="files">A IFileListEntry array.</param>
    public void HandleFileSelected(IFileListEntry[] files)
    {
        foreach (IFileListEntry file in files)
        {
            if (file != null && file.Name == "classList.csv")
            {
                UploadCSV(file);
                break;
            }
        }
        foreach (IFileListEntry file in files)
        {
            if (file != null && file.Name != "classList.csv")
            {
                UploadCSV(file);
            }
        }
    }


    /// <summary>
    /// Takes <paramref name="reader"> and <paramref name="fileName"> and converts the CSV file into a List<ReqCourse>
    /// and takes those classes from the database, and loads it into CoreList
    /// </summary>
    /// <param name="reader">A StreamReader.</param>
    /// <param name="fileName">A string.</param>
    public async Task HandleCore(StreamReader reader, string fileName)
    {
        var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        CSVfile = csv.GetRecords<ReqCourse>();
        foreach (ReqCourse req in CSVfile)
        {
            Course tempCourse = new Course();
            string className = req.CourseName;
            tempCourse = await getCourse(className);
            if(tempCourse != null)
            {
                CoreList.Add(tempCourse);
            }
        }
        reader.Close();
        csv.Dispose();
    }

    /// <summary>
    /// Takes <paramref name="reader"> and <paramref name="fileName"> and converts the CSV file into a List<ReqCourse>
    /// and takes those classes from the database, and loads it into UpperList
    /// </summary>
    /// <param name="reader">A StreamReader.</param>
    /// <param name="fileName">A string.</param>
    public async Task HandleUpper(StreamReader reader, string fileName)
    {
        var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        CSVfile = csv.GetRecords<ReqCourse>();
        foreach (ReqCourse req in CSVfile)
        {
            Course tempCourse = new Course();
            string className = req.CourseName;
            tempCourse = await getCourse(className);
            if (tempCourse != null)
            {
                UpperList.Add(tempCourse);
            }
        }
        reader.Close();
        csv.Dispose();
    }

    /// <summary>
    /// Takes <paramref name="reader"> and <paramref name="fileName"> and converts the CSV file into a List<ReqCourse>
    /// and takes those classes from the database, and loads it into AddList
    /// </summary>
    /// <param name="reader">A StreamReader.</param>
    /// <param name="fileName">A string.</param>
    public async Task HandleAdd(StreamReader reader, string fileName)
    {
        var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        CSVfile = csv.GetRecords<ReqCourse>();
        foreach (ReqCourse req in CSVfile)
        {
            Course tempCourse = new Course();
            string className = req.CourseName;
            tempCourse = await getCourse(className);
            if (tempCourse != null)
            {
                AddList.Add(tempCourse);
            }
        }
        reader.Close();
        csv.Dispose();
    }

    /// <summary>
    /// Takes <paramref name="reader"> and <paramref name="fileName"> and converts the CSV file into a List<ReqCourse>
    /// and takes those classes from the database, and loads it into classList
    /// </summary>
    /// <param name="reader">A StreamReader.</param>
    /// <param name="fileName">A string.</param>
    public async Task HandleClassList(StreamReader reader, string fileName)
    {
        var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        CSVfile = csv.GetRecords<ReqCourse>();
        foreach (ReqCourse req in CSVfile)
        {
            Course tempCourse = new Course();
            string className = req.CourseName;
            tempCourse = await getCourse(className);
            if (tempCourse != null)
            {
                classList.Add(tempCourse.CourseName);
            }
        }
        reader.Close();
        csv.Dispose();
    }

    /// <summary>
    /// Takes <paramref name="f"> and converts the file into a StreamReader
    /// passes the StreamReader, and based on the file name passes it into the proper upload function
    /// </summary>
    /// <param name="iFile">An IFileListEntry.</param>
    public async Task UploadCSV(IFileListEntry iFile)
    {
        var ms = new MemoryStream();
        try
        {
            await iFile.Data.CopyToAsync(ms);
        }
        catch (NullReferenceException ne)
        {

        }

        StreamReader reader = new StreamReader(ms, System.Text.Encoding.UTF8);
        reader.DiscardBufferedData();
        reader.BaseStream.Seek(0, SeekOrigin.Begin);

        var fileName = iFile.Name.Split(".csv")[0];

        switch (fileName)
        {
            case "Core":
                await HandleCore(reader, fileName);
                break;
            case "Upper":
                await HandleUpper(reader, fileName);
                break;
            case "Add":
                await HandleAdd(reader, fileName);
                break;
            case "classList":
                await HandleClassList(reader, fileName);
                break;
        }
    }

    /// <summary>
    /// Takes <paramref name="courseName"> and returns a Course object from the appropriate DB table
    /// </summary>
    /// <returns>
    /// Task<Course> object
    /// </returns>
    /// <param name="courseName">A string.</param>
    public async Task<Course> getCourse(string className)
    {
        Course currentCourse = await dbService.GetCourseAsync(className);
        base.StateHasChanged();
        return currentCourse;
        //dbService.Testing("CSCI300");
    }


}
