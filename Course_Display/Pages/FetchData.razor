@page "/fetchdata"

@using Course_Display.Data;
@using CsvHelper;
@using System.IO;
@using System.Globalization;
@inject DBService dbService

<h1>Fetch Data</h1>


@if (currentCourse == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ClassComponent course="currentCourse" classList="classList"></ClassComponent>
    <table class="table">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Credit Hours</th>
                <th>Prereqs</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentCourse.CourseName</td>
                <td>@currentCourse.CreditHours</td>
                <!-- <td>@returnPrereqs(currentCourse.Prereqs).ToString()</td> -->
            </tr>
        </tbody>
    </table>
}

<br />
<br />

<input type="text" @bind="courseName" />
<br />
<br />
<button @onclick="(async ()=> await getCourse())">Get Course</button>

@code {
    public Course currentCourse;
    public string courseName = "";
    public IEnumerable<ReqCourse> ReqCoreList;
    public List<Course> NoPrereqList = new List<Course>();
    public List<string> classList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var Table = "RequiredTest";
        var _context = new CoursedbContext { CourseList = Table };

        var reader = new StreamReader("J:\\Desktop\\Intro to Software Engineering\\Course_Display\\Course_Display\\" + Table + ".csv");
        var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
        ReqCoreList = csv.GetRecords<ReqCourse>();
        foreach (ReqCourse req in ReqCoreList)
        {
            Course tempCourse = new Course();
            courseName = req.CourseName;
            tempCourse = await getCourse();
            classList.Add(tempCourse.CourseName);
            if (tempCourse.Prereqs == null || tempCourse.Prereqs == "")
            {
                NoPrereqList.Add(tempCourse);
            }
        }
        reader.Close();
        csv.Dispose();
    }

    // Given a course name as a string
    // Populates the currentCourse object with the values belonging to that course
    public async Task<Course> getCourse()
    {
        currentCourse = await dbService.GetCourseAsync(courseName);
        return currentCourse;
        //dbService.Testing("CSCI300");
    }


}
