@inject DBService dbService


@if (course == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (hasTakenClass)
    {
        <div @onclick="( ()=> changeDisplay())" style="Background-color:green"><h3>@course.CourseName</h3></div>
    }
    else
    {
        <div @onclick="( ()=> changeDisplay())" style="@(meetsPrereqs == true ? "Background-color:yellow" : "Background-color:red")"><h3>@course.CourseName</h3></div>
    }
    <div hidden="@visible">

    </div>
    <div hidden="@visible">
        @foreach (KeyValuePair<string, bool> kvp in AndDict)
        {
            if (returnTrueIfHasClass(kvp.Key))
            {
                <div style="Background-color:green"><h6>@kvp.Key</h6></div>
            }
            else
            {
                <div style="@(checkIfCanTakePrereq(kvp.Key).Result == true ? "Background-color:yellow" : "Background-color:red")"><h6>@kvp.Key</h6></div>
            }
            <div>and</div>
        }
        @{ var dictCount = 0;
            var dictionariesCount = 0;}
        @foreach (Dictionary<string, bool> dict in orDict)
        {
            dictionariesCount++;
            @foreach (KeyValuePair<string, bool> kvp in dict)
            {
                dictCount++;
                if (returnTrueIfHasClass(kvp.Key))
                {
                    <div style="Background-color:green"><h6>@kvp.Key</h6></div>
                }
                else
                {
                    <div style="@(checkIfCanTakePrereq(kvp.Key).Result == true ? "Background-color:yellow" : "Background-color:red")"><h6>@kvp.Key</h6></div>
                }
                if(dictCount < dict.Count)
                {
                    <div>or</div>
                }
            }
            dictCount = 0;
            if(dictionariesCount < orDict.Count)
            {
                <div>and</div>
            }
        }
    </div>
}


@code {
    [Parameter]
    public Course course { get; set; }

    [Parameter]
    public List<string> classList { get; set; }

    public bool visible = true;
    public bool meetsPrereqs = false;
    public bool hasTakenClass = false;
    public int count = 0;

    List<Course> orCourses = new List<Course>();
    List<Course> andCourses = new List<Course>();

    List<Dictionary<string, bool>> orDict = new List<Dictionary<string, bool>>();
    Dictionary<string, bool> AndDict = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        meetsPrereqs = returnPrereqs(course);
        populateCourses();
    }

    public async void changeDisplay()
    {
        visible = !visible;
    }

    public async Task<bool> checkIfCanTakePrereq(string prereqName)
    {
        Course prereqCourse = await getCourse(prereqName);
        bool canTake = false;

        canTake = returnPrereqs(prereqCourse);
        return canTake;
    }

    public async Task populateCourses()
    {
        foreach (KeyValuePair<string, bool> kvp in AndDict)
        {
            andCourses.Add(getCourse(kvp.Key).Result);
        }
        foreach (Dictionary<string, bool> dict in orDict)
        {
            foreach (KeyValuePair<string, bool> kvp in dict)
            {
                orCourses.Add(getCourse(kvp.Key).Result);
            }
        }
    }

    // Given a course name as a string
    // Populates the currentCourse object with the values belonging to that course
    public async Task<Course> getCourse(string courseName)
    {
        Course courseFromDB = new Course();
        courseFromDB = await dbService.GetCourseAsync(courseName);
        return courseFromDB;
        //dbService.Testing("CSCI300");
    }

    public bool returnPrereqs(Course courseToCheck)
    {
        // "MATH 2230,*,MATH 2030,CSCI 2030,"

        string[] PrereqArray = { "" };

        if (!(courseToCheck.Prereqs == null))
        {
            PrereqArray = courseToCheck.Prereqs.Split(",");
        }

        bool canTake = PrereqCheck(PrereqArray);

        if (classList.Contains(courseToCheck.CourseName))
        {
            hasTakenClass = true;
        }

        return canTake;
    }

    // Given a string array holding the prerequsities, and using the classList provided by the user
    // Returns true/false depending on if they can take that class with the classes they've taken so far
    private bool PrereqCheck(string[] PrereqArray)
    {
        count++;

        bool canTakeClass = false;
        List<Dictionary<string, bool>> tempOrDict = new List<Dictionary<string, bool>>();
        HashSet<string> tempAndComplement = new HashSet<string>();
        Dictionary<string, bool> tempAndDict = new Dictionary<string, bool>();

        // MATH 1120,*,MATH 1130,*,MATH 1220,MATH 100,MATH 500,*,MATH 700,MATH 200,MATH 300,MATH 4000,*,MATH 900,*,MATH 600
        //        0  1      2    3   4        5       6        7       8        9       10       11   12     13  14   15
        try
        {
            string value = "*";
            int[] asteriskArray = PrereqArray.Select((b, i) => b == value ? i : -1).Where(i => i != -1).ToArray();

            for (int i = 0; i < PrereqArray.Length - 1; i = i)
            {
                if (PrereqArray[i + 1] == "*")
                {
                    Dictionary<string, bool> tempDict = new Dictionary<string, bool>();
                    int lastAsterisk = recursiveArrayCheck(PrereqArray, i + 1);
                    bool oneOr = false;
                    if (lastAsterisk == i + 1)
                    {
                        oneOr = true;
                    }
                    for (int x = i; x < lastAsterisk; x = x + 2)
                    {
                        if (x + 1 != lastAsterisk || oneOr)
                        {
                            tempAndComplement.Add(PrereqArray[x]);
                            tempDict.Add(PrereqArray[x], returnTrueIfHasClass(PrereqArray[x]));
                        }
                        tempAndComplement.Add(PrereqArray[x + 2]);
                        tempDict.Add(PrereqArray[x + 2], returnTrueIfHasClass(PrereqArray[x + 2]));
                    }
                    tempOrDict.Add(tempDict);
                    i = lastAsterisk + 1;
                }
                else
                {

                    i++;
                }
            }

            foreach (string s in PrereqArray)
            {
                if (!tempAndComplement.Contains(s) && s != "*" && s != "")
                {
                    bool hasClass = returnTrueIfHasClass(s);
                    tempAndDict.Add(s, hasClass);
                    if(hasClass)
                    {
                        canTakeClass = true;
                    }
                }
            }

            foreach (Dictionary<string, bool> d in tempOrDict)
            {
                if (!d.ContainsValue(true))
                {
                    canTakeClass = false;
                    break;
                }
                else
                {
                    canTakeClass = true;
                }
            }

            if (tempAndDict.ContainsValue(false))
            {
                canTakeClass = false;
            }
        }
        catch (Exception e)
        {
            canTakeClass = true;
        }

        if(count == 1)
        {
            orDict = tempOrDict;
            AndDict = tempAndDict;
        }

        if (PrereqArray.Length == 1 && PrereqArray[0] == "")
        {
            canTakeClass = true;
        }

        return canTakeClass;
    }

    // Given a class name as a string
    // Returns true if classList contains that class
    // Returns false if classList does not contain the class
    private bool returnTrueIfHasClass(string className)
    {
        return classList.Contains(className);
    }

    // Given an element location, and the string array of prerequisites from a class
    // Returns the location of the last asterisk, OR, in a sequence
    // i.e.: Given 1, returns 3. Given 7 returns 7. Given 12 returns 14.
    // MATH 1120,*,MATH 1130,*,MATH 1220,MATH 100,MATH 500,*,MATH 700,MATH 200,MATH 300,MATH 4000,*,MATH 900,*,MATH 600
    //        0  1      2    3   4        5       6        7       8        9       10       11   12     13  14   15
    private int recursiveArrayCheck(string[] PrereqArray, int location)
    {
        if (location + 2 < PrereqArray.Length)
        {
            if (PrereqArray[location + 2] == "*")
            {
                recursiveArrayCheck(PrereqArray, location + 2);
                return location + 2;
            }
            else
            {
                return location;
            }
        }
        else
        {
            return location;
        }
    }
}
