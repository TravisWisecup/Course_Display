@inject DBService dbService


@if (course == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (hasTakenClass)
    {
        <div @onclick="( ()=> changeDisplay())" style="Background-color:green"><h3>@course.CourseName</h3></div>
    }
    else
    {
        <div @onclick="( ()=> changeDisplay())" style="@(meetsPrereqs == true ? "Background-color:yellow" : "Background-color:red")"><h3>@course.CourseName</h3></div>
    }
    <div hidden="@visible">
        @{ 
            var andCount = 0;
        }
        @foreach (KeyValuePair<string, bool> kvp in AndDict)
        {
            andCount++;
            if (returnTrueIfHasClass(kvp.Key))
            {
                <div style="Background-color:green"><h6>@kvp.Key</h6></div>
            }
            else
            {
                <div style="@(checkIfCanTakePrereq(kvp.Key).Result == true ? "Background-color:yellow" : "Background-color:red")"><h6>@kvp.Key</h6></div>
            }
            if(andCount < AndDict.Count || orDict.Count > 0)
            {
                <div>and</div>
            }
        }
        @{ var dictCount = 0;
            var dictionariesCount = 0;}
        @foreach (Dictionary<string, bool> dict in orDict)
        {
            dictionariesCount++;
            @foreach (KeyValuePair<string, bool> kvp in dict)
            {
                dictCount++;
                if (returnTrueIfHasClass(kvp.Key))
                {
                    <div style="Background-color:green"><h6>@kvp.Key</h6></div>
                }
                else
                {
                    <div style="@(checkIfCanTakePrereq(kvp.Key).Result == true ? "Background-color:yellow" : "Background-color:red")"><h6>@kvp.Key</h6></div>
                }
                if(dictCount < dict.Count)
                {
                    <div>or</div>
                }
            }
            dictCount = 0;
            if(dictionariesCount < orDict.Count)
            {
                <div>and</div>
            }
        }
        @if(course.Prereqs == "" || course.Prereqs == null)
        {
            <div style="Background-color:green">No prerequisites</div>
        }
    </div>
}


@code {

    /// <value>Gets the course for the component.</value>
    [Parameter]
    public Course course { get; set; }

    /// <value>Gets the student list of classes taken for the component.</value>
    [Parameter]
    public List<string> classList { get; set; }

    /// <value>Gets the value of the prerequisites onClick boolean.</value>
    public bool visible = true;
    /// <value>Gets the value of whether or not the student meets the prerequisites for this course.</value>
    public bool meetsPrereqs = false;
    /// <value>Gets the value of whether or not the student has taken this course.</value>
    public bool hasTakenClass = false;
    /// <value>Gets the value of how many times the PrereqCheck method has been called.</value>
    public int count = 0;

    /// <value>Gets the list of classes where they can be taken, and whether or not they have been taken.</value>
    /// <example>
    /// A class needs  CSCI 2030 with a C- or better, or MATH 2030 with a C- or better, or MATH 2230 with a C- or better,
    /// So there would be one Dictionary with CSCI 2030, MATH 2030, and MATH 2230
    /// Their boolean values would be determined by the classList loaded
    /// </example>
    List<Dictionary<string, bool>> orDict = new List<Dictionary<string, bool>>();
    /// <value>Gets the dictionary of classes where they can be taken, and whether or not they have been taken.</value>
    /// <example>
    /// A class needs  CSCI 3320 and CSCI 3660 with C- or better.
    /// So there would be one string of "CSCI 3320", and another of "CSCI 3660"
    /// Their boolean values would be determined by the classList loaded
    /// </example>
    Dictionary<string, bool> AndDict = new Dictionary<string, bool>();


    /// <summary>
    /// Sets the meetsPrereqs value based on the results of the returnPrereqs function given the current course
    /// </summary>
    /// <returns>
    /// async Task
    /// </returns>
    protected override async Task OnInitializedAsync()
    {
        meetsPrereqs = returnPrereqs(course);
        //populateCourses();
    }

    /// <summary>
    /// Changes the display of the onClick element of the class component, showing or hiding the prerequisites for the class.
    /// </summary>
    /// <returns>
    /// void
    /// </returns>
    public async void changeDisplay()
    {
        visible = !visible;
    }

    /// <summary>
    /// Takes <paramref name="prereqName"> and returns true/false depending on if the user can take the class
    /// </summary>
    /// <returns>
    /// The value of true/false if they can or can't take the prerequisite
    /// </returns>
    /// <param name="prereqName">A string.</param>
    public async Task<bool> checkIfCanTakePrereq(string prereqName)
    {
        Course prereqCourse = await getCourse(prereqName);
        bool canTake = false;

        canTake = returnPrereqs(prereqCourse);
        return canTake;
    }

    /// <summary>
    /// Takes <paramref name="courseName"> and returns a Course object from the appropriate DB table
    /// </summary>
    /// <returns>
    /// Task<Course> object
    /// </returns>
    /// <param name="courseName">A string.</param>
    public async Task<Course> getCourse(string courseName)
    {
        Course courseFromDB = new Course();
        if(courseName.StartsWith("ISQA") || courseName.StartsWith("ITIN") || (courseName.StartsWith("STAT")))
        {
            return null;
        }
        else
        {
            courseFromDB = await dbService.GetCourseAsync(courseName);
            return courseFromDB;
        }
    }


    /// <summary>
    /// Takes <paramref name="courseToCheck"> and returns a boolean value if they can take the class or not
    /// It separates the prereq string taken from the Course object, and splits it into an array
    /// It passes that array as a parameter into the PrereqCheck function
    /// Finally it sets the hasTakenClass boolean value based on whether or not it is contained in the classList
    /// </summary>
    /// <returns>
    /// True/false if they can take the class or not
    /// </returns>
    /// <param name="courseToCheck">A Course.</param>
    public bool returnPrereqs(Course courseToCheck)
    {
        // "MATH 2230,*,MATH 2030,CSCI 2030,"

        if(courseToCheck == null)
        {
            return false;
        }
        else
        {
            string[] PrereqArray = { "" };

            if (!(courseToCheck.Prereqs == null))
            {
                PrereqArray = courseToCheck.Prereqs.Split(",");
            }

            bool canTake = PrereqCheck(PrereqArray);

            if (classList.Contains(courseToCheck.CourseName))
            {
                hasTakenClass = true;
            }

            return canTake;
        }
    }

    /// <summary>
    /// Takes <paramref name="PrereqArray"> and returns a boolean value if they can take the class or not
    /// Sets up an integer array to hold the element locations of where the asterisks are in <param name="PrereqArray">
    /// Using the location of where the asterisks are, we can determine if a class belongs to orDict, or if it belongs to andDict
    /// We hold these values in temporary variables, and set them at the end if count is 1, otherwise we just use them to check if the class can be taken
    /// /// </summary>
    /// <returns>
    /// True/false if they can take the class or not
    /// </returns>
    /// <param name="PrereqArray">A string array.</param>
    private bool PrereqCheck(string[] PrereqArray)
    {
        count++;

        bool canTakeClass = false;
        List<Dictionary<string, bool>> tempOrDict = new List<Dictionary<string, bool>>();
        HashSet<string> tempAndComplement = new HashSet<string>();
        Dictionary<string, bool> tempAndDict = new Dictionary<string, bool>();

        // MATH 1120,*,MATH 1130,*,MATH 1220,MATH 100,MATH 500,*,MATH 700,MATH 200,MATH 300,MATH 4000,*,MATH 900,*,MATH 600
        //        0  1      2    3   4        5       6        7       8        9       10       11   12     13  14   15
        try
        {
            string value = "*";
            int[] asteriskArray = PrereqArray.Select((b, i) => b == value ? i : -1).Where(i => i != -1).ToArray();

            for (int i = 0; i < PrereqArray.Length - 1; i = i)
            {
                if (PrereqArray[i + 1] == "*")
                {
                    Dictionary<string, bool> tempDict = new Dictionary<string, bool>();
                    int lastAsterisk = recursiveArrayCheck(PrereqArray, i + 1);
                    bool oneOr = false;
                    if (lastAsterisk == i + 1)
                    {
                        oneOr = true;
                    }
                    for (int x = i; x < lastAsterisk; x = x + 2)
                    {
                        if (x + 1 != lastAsterisk || oneOr)
                        {
                            tempAndComplement.Add(PrereqArray[x]);
                            tempDict.Add(PrereqArray[x], returnTrueIfHasClass(PrereqArray[x]));
                        }
                        tempAndComplement.Add(PrereqArray[x + 2]);
                        tempDict.Add(PrereqArray[x + 2], returnTrueIfHasClass(PrereqArray[x + 2]));
                    }
                    tempOrDict.Add(tempDict);
                    i = lastAsterisk + 1;
                }
                else
                {

                    i++;
                }
            }

            foreach (string s in PrereqArray)
            {
                if (!tempAndComplement.Contains(s) && s != "*" && s != "")
                {
                    bool hasClass = returnTrueIfHasClass(s);
                    tempAndDict.Add(s, hasClass);
                    if(hasClass)
                    {
                        canTakeClass = true;
                    }
                }
            }

            foreach (Dictionary<string, bool> d in tempOrDict)
            {
                if (!d.ContainsValue(true))
                {
                    canTakeClass = false;
                    break;
                }
                else
                {
                    canTakeClass = true;
                }
            }

            if (tempAndDict.ContainsValue(false))
            {
                canTakeClass = false;
            }
        }
        catch (Exception e)
        {
            canTakeClass = true;
        }

        if(count == 1)
        {
            orDict = tempOrDict;
            AndDict = tempAndDict;
        }

        if (PrereqArray.Length == 1 && PrereqArray[0] == "")
        {
            canTakeClass = true;
        }

        return canTakeClass;
    }

    /// <summary>
    /// Takes <paramref name="className"> and returns a boolean value if they can take the class or not
    /// </summary>
    /// <returns>
    /// True/false if they can take the class or not
    /// </returns>
    /// <param name="className">A string.</param>
    private bool returnTrueIfHasClass(string className)
    {
        return classList.Contains(className);
    }

    /// <summary>
    /// Takes <paramref name="PrereqArray"> and <paramef name="location"> returns an integer location of the last asterisk, OR, in a sequence
    /// </summary>
    /// <returns>
    /// An integer
    /// </returns>
    /// <param name="PrereqArray">A string array.</param>
    /// <param name="location">An int.</param>
    /// <example>
    /// i.e.: Given 1, returns 3. Given 7 returns 7. Given 12 returns 14.
    /// MATH 1120,*,MATH 1130,*,MATH 1220,MATH 100,MATH 500,*,MATH 700,MATH 200,MATH 300,MATH 4000,*,MATH 900,*,MATH 600
    ///        0  1      2    3   4        5       6        7       8        9       10       11   12     13  14   15
    /// </example>
    private int recursiveArrayCheck(string[] PrereqArray, int location)
    {
        if (location + 2 < PrereqArray.Length)
        {
            if (PrereqArray[location + 2] == "*")
            {
                recursiveArrayCheck(PrereqArray, location + 2);
                return location + 2;
            }
            else
            {
                return location;
            }
        }
        else
        {
            return location;
        }
    }
}
